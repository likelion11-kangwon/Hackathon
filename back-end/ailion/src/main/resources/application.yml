server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: utf-8
      enabled: true
      force: true

spring:
#  datasource:
#    url: jdbc:h2:tcp://localhost/~/myspring
#    username: sa
#    password: 1234
#    driver-class-name: org.h2.Driver
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://database-2.cuk6k0dwwstu.ap-northeast-2.rds.amazonaws.com/hackathon
    username: ailion
    password: ailion0818!
  sql:
    init:
      mode:
        always
  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        # show_sql: true
        format_sql: true
        default_batch_fetch_size: 1000

  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
    view:
      prefix: /template/
      suffix: ./mustache
    #      suffix: ./mustache
    throw-exception-if-no-handler-found: true
  web:
    resources:
      add-mappings: false

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
          facebook:
            client-id: ${FACEBOOK_CLIENT_ID}
            client-secret: ${FACEBOOK_CLIENT_SECRET}
            scope:
              - email
              - public_profile
          naver:
            client_id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  # file upload max size (파일 업로드 크기 설정)
  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 20MB


#  data:
#    web:
#      pageable:
#        default-page-size: 20
#        max-page-size: 2000

logging.level:
  org.hibernate.SQL: debug

jwt:
  header: Authorization
  #HS512 알고리즘을 사용할 것이기 때문에 512bit, 즉 64byte 이상의 secret key를 사용해야 한다.
  secret: a2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbQ==
  token-validity-in-seconds: 86400 # ttl (초)

file:
  dir: https://sample-ai-project.kr.object.ncloudstorage.com/

#  spring.datasource.url=jdbc:mysql://localhost:3306/auth
#  spring.datasource.username=root
#  spring.datasource.password=root123
#  spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
